<Application x:Class="Corsair_Effects_Engine.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:Corsair_Effects_Engine"
             xmlns:Themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
             xmlns:p="clr-namespace:Corsair_Effects_Engine.Properties"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- Styles -->
        <!-- Window Style -->
        <local:BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />
        <local:BoolSwap x:Key="boolSwap" />
        <Color x:Key="WindowBackgroundColor">#FF2D2D30</Color>
        <Color x:Key="HighlightColor">#FF3F3F41</Color>
        <Color x:Key="ForegroundColor">#FFF4F4F5</Color>
        <Color x:Key="ControlBackgroundColor">#FF4D4D50</Color>
        <Color x:Key="ControlBackgroundHoverColor">#FF7D7D80</Color>
        <Color x:Key="ControlBackgroundDisabledColor">#FF00FF00</Color>
        <Color x:Key="TextColor">#F0F0F0</Color>
        <Color x:Key="TextDisabledColor">#909090</Color>
        <Color x:Key="BorderColor">#FF404040</Color>
        <SolidColorBrush x:Key="WindowBackgroundColorBrush" Color="{StaticResource WindowBackgroundColor}"/>
        <SolidColorBrush x:Key="HighlightColorBrush" Color="{StaticResource HighlightColor}"/>
        <SolidColorBrush x:Key="AccentColorBrush" Color="{Binding Source={x:Static p:Settings.Default}, Path=OptAccentColor, Mode=OneWay}"/>
        <SolidColorBrush x:Key="ForegroundColorBrush" Color="{StaticResource ForegroundColor}"/>
        <SolidColorBrush x:Key="ControlBackgroundColorBrush" Color="{StaticResource ControlBackgroundColor}"/>
        <SolidColorBrush x:Key="ControlBackgroundHoverColorBrush" Color="{StaticResource ControlBackgroundHoverColor}"/>
        <SolidColorBrush x:Key="ControlBackgroundDisabledColorBrush" Color="{StaticResource ControlBackgroundDisabledColor}"/>
        <SolidColorBrush x:Key="TextColorBrush" Color="{StaticResource TextColor}"/>
        <SolidColorBrush x:Key="TextDisabledColorBrush" Color="{StaticResource TextDisabledColor}"/>
        <SolidColorBrush x:Key="BorderColorBrush" Color="{StaticResource BorderColor}"/>
        <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          Margin="{TemplateBinding Padding}"
                          RecognizesAccessKey="True" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource HighlightColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MyWindowStyle" TargetType="local:MainWindow">
            <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
            <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
            <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
            <Setter Property="UseLayoutRounding" Value="True" />
            <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="local:MainWindow">
                        <Border x:Name="WindowBorder" Margin="{Binding Source={x:Static SystemParameters.WindowNonClientFrameThickness}}" Background="{StaticResource WindowBackgroundColorBrush}">
                            <Grid>
                                <Border BorderThickness="1">
                                    <AdornerDecorator>
                                        <Grid x:Name="LayoutRoot">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="25" />
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="15" />
                                            </Grid.RowDefinitions>
                                            <ContentPresenter Grid.Row="1" Grid.RowSpan="2" Margin="7"/>
                                            <Rectangle x:Name="HeaderBackground" Height="25" Fill="{DynamicResource WindowBackgroundColorBrush}" VerticalAlignment="Top" Grid.Row="0"/>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" WindowChrome.IsHitTestVisibleInChrome="True" Grid.Row="0">
                                                <Button Command="{Binding Source={x:Static SystemCommands.MinimizeWindowCommand}}" ToolTip="Minimize" Style="{StaticResource WindowButtonStyle}">
                                                    <Button.Content>
                                                        <Grid Width="30" Height="25" RenderTransform="1,0,0,1,0,1">
                                                            <Path Data="M0,6 L8,6 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                        </Grid>
                                                    </Button.Content>
                                                </Button>
                                                <Grid Margin="1,0,1,0">
                                                    <Button x:Name="Restore" Command="{Binding Source={x:Static SystemCommands.RestoreWindowCommand}}" ToolTip="Restore" Visibility="Collapsed" Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="30" Height="25" UseLayoutRounding="True" RenderTransform="1,0,0,1,.5,.5">
                                                                <Path Data="M2,0 L8,0 L8,6 M0,3 L6,3 M0,2 L6,2 L6,8 L0,8 Z" Width="8" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                    <Button x:Name="Maximize" Command="{Binding Source={x:Static SystemCommands.MaximizeWindowCommand}}" ToolTip="Maximize" Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="31" Height="25">
                                                                <Path Data="M0,1 L9,1 L9,8 L0,8 Z" Width="9" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                </Grid>
                                                <Button Command="{Binding Source={x:Static SystemCommands.CloseWindowCommand}}" ToolTip="Close"  Style="{StaticResource WindowButtonStyle}">
                                                    <Button.Content>
                                                        <Grid Width="30" Height="25" RenderTransform="1,0,0,1,0,1">
                                                            <Path Data="M0,0 L8,7 M8,0 L0,7 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1.5"  />
                                                        </Grid>
                                                    </Button.Content>
                                                </Button>
                                            </StackPanel>
                                            <TextBlock x:Name="WindowTitleTextBlock" Grid.Row="0" Text="{TemplateBinding Title}" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"  Margin="8 -1 0 0"  FontSize="16"  Foreground="{TemplateBinding Foreground}"/>
                                            <Grid Grid.Row="2">
                                                <Path x:Name="ResizeGrip" Visibility="Collapsed" Width="12" Height="12" Margin="1" HorizontalAlignment="Right"
                                        Stroke="{StaticResource AccentColorBrush}" StrokeThickness="1" Stretch="None" Data="F1 M1,10 L3,10 M5,10 L7,10 M9,10 L11,10 M2,9 L2,11 M6,9 L6,11 M10,9 L10,11 M5,6 L7,6 M9,6 L11,6 M6,5 L6,7 M10,5 L10,7 M9,2 L11,2 M10,1 L10,3" />
                                            </Grid>
                                        </Grid>
                                    </AdornerDecorator>
                                </Border>
                                <Border BorderBrush="{StaticResource AccentColorBrush}" BorderThickness="1" 
                                        Visibility="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource bool2VisibilityConverter}}" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="WindowState" Value="Maximized">
                                <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="Restore" Property="Visibility" Value="Visible" />
                                <Setter TargetName="LayoutRoot" Property="Margin" Value="7" />
                            </Trigger>
                            <Trigger Property="WindowState" Value="Normal">
                                <Setter TargetName="Maximize" Property="Visibility" Value="Visible" />
                                <Setter TargetName="Restore" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                    <Condition Property="WindowState" Value="Normal" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CornerRadius="0" GlassFrameThickness="1" UseAeroCaptionButtons="False" />
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Tooltip -->
        <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
            <Setter Property="Background" Value="{StaticResource WindowBackgroundColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource AccentColorBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource AccentColorBrush}"/>
        </Style>

        <!-- ContextMenu -->
        <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
            <Setter Property="Background" Value="{StaticResource WindowBackgroundColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource AccentColorBrush}"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border 
                          Name="Border"
                          Background="{StaticResource WindowBackgroundColorBrush}"
                          BorderBrush="{StaticResource AccentColorBrush}"
                          BorderThickness="2">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
            <Setter Property="Background" Value="{StaticResource WindowBackgroundColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource AccentColorBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_38">
                            <Grid x:Name="Grid" Uid="Grid_49">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="17" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>
                                <Path x:Name="GlyphPanel" Data="M 0 5 L 4 10  M 4 10 L 10 -2" StrokeThickness="2" Stroke="{StaticResource AccentColorBrush}" Margin="4,0,6,0" Uid="Path_12" Visibility="Hidden" VerticalAlignment="Center"/>
                                <ContentPresenter 
                                    x:Name="ContentPresenter" 
                                    ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                    Content="{TemplateBinding Header}" 
                                    Grid.Column="1" 
                                    ContentSource="Header" 
                                    Margin="{TemplateBinding Padding}" 
                                    RecognizesAccessKey="True" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    Uid="ContentPresenter_33"/>
                                <TextBlock x:Name="InputGestureText" Grid.Column="2" DockPanel.Dock="Right" Margin="5,2,0,2" Text="{TemplateBinding InputGestureText}" Uid="TextBlock_10"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" Value="{StaticResource AccentColorBrush}"/>
                                <Setter Property="Stroke" TargetName="GlyphPanel" Value="{StaticResource TextColorBrush}"/>
                            </Trigger>
                            <DataTrigger Value="False">
                                <DataTrigger.Binding>
                                    <Binding ElementName="MenuItemIcon" Path="Source"/>
                                </DataTrigger.Binding>
                                <Setter Property="VerticalAlignment" TargetName="ContentPresenter" Value="Center"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CustomSeparator" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
            <Setter Property="Height" Value="1"/>
            <Setter Property="Margin" Value="3,2"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border Background="{DynamicResource AccentColorBrush}" Uid="Border_28"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Hyperlink-like Button -->
        <ControlTemplate x:Key="HyperlinkLikeButtonTemplate" TargetType="{x:Type Button}">
            <TextBlock x:Name="innerText" Foreground="{StaticResource AccentColorBrush}" Cursor="Hand" >
                <ContentPresenter />
            </TextBlock>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsMouseOver" Value="true">
                    <Setter TargetName="innerText" Property="Foreground" Value="{StaticResource AccentColorBrush}"/>
                    <Setter TargetName="innerText" Property="Opacity" Value=".8"/>
                    <!--<Setter TargetName="innerText" Property="TextDecorations" Value="Underline" />-->
                </Trigger>
                <Trigger Property="Button.IsEnabled" Value="false">
                    <Setter TargetName="innerText" Property="Foreground" Value="{StaticResource AccentColorBrush}"/>
                    <Setter TargetName="innerText" Property="Opacity" Value=".8"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="HyperlinkLikeButton" TargetType="{x:Type Button}">
            <Setter Property="Template" Value="{StaticResource HyperlinkLikeButtonTemplate}" />
        </Style>

        <!-- Big Text-Only Button -->
        <ControlTemplate x:Key="BigTextOnlyButtonTemplate" TargetType="{x:Type Button}">
            <TextBlock x:Name="innerText" Foreground="{StaticResource AccentColorBrush}" Cursor="Hand" FontSize="20">
                <ContentPresenter />
            </TextBlock>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsMouseOver" Value="true">
                    <Setter TargetName="innerText" Property="Foreground" Value="{StaticResource AccentColorBrush}"/>
                    <Setter TargetName="innerText" Property="Opacity" Value=".8"/>
                    <!--<Setter TargetName="innerText" Property="TextDecorations" Value="Underline" />-->
                </Trigger>
                <Trigger Property="Button.IsEnabled" Value="false">
                    <Setter TargetName="innerText" Property="Foreground" Value="{StaticResource AccentColorBrush}"/>
                    <Setter TargetName="innerText" Property="Opacity" Value=".8"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="BigTextOnlyButton" TargetType="{x:Type Button}">
            <Setter Property="Template" Value="{StaticResource BigTextOnlyButtonTemplate}" />
        </Style>

        <!-- Flat Buttons -->
        <Style
        x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MetroButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ControlBackgroundColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="10 5"/>
            <Setter Property="FontSize" Value="11" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource BorderColorBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="OpacityMask" Value="#AA888888"/>
                                <!--<Setter Property="Margin" Value="2 1" />-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="{StaticResource TextColorBrush}"/>
                                <Setter Property="Background" Value="{StaticResource ControlBackgroundHoverColorBrush}"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource TextDisabledColorBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Flat Combobox -->
        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="#707072"
                  BorderBrush="{StaticResource BorderColorBrush}"
                  BorderThickness="1" />
                <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="{StaticResource ControlBackgroundColorBrush}" 
                  BorderBrush="#404040"
                  BorderThickness="0,0,1,0"/>
                <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="{StaticResource AccentColorBrush}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Width="9"
                  Data="M 0 0 L 4 4 L 8 0 Z"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="#808080" />
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <!--
                    <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                    <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                    <Setter Property="Foreground" Value="#888888"/>
                    -->
                    <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        </ControlTemplate>
        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="MinWidth" Value="60"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="Background" Value="{StaticResource AccentColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton 
                                Name="ToggleButton" 
                                Template="{StaticResource ComboBoxToggleButton}" 
                                Grid.Column="2" 
                                Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                            </ToggleButton>
                            <ContentPresenter
                                Name="ContentSite"
                                IsHitTestVisible="False" 
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="3,3,23,3"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"/>
                            <TextBox x:Name="PART_EditableTextBox"
                                Style="{x:Null}" 
                                Template="{StaticResource ComboBoxTextBox}" 
                                HorizontalAlignment="Left" 
                                VerticalAlignment="Center" 
                                Margin="3,3,23,3"
                                Focusable="True" 
                                Background="Transparent"
                                Visibility="Hidden"
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>
                            <Popup 
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">
                                <Grid 
                                  Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border 
                                        x:Name="DropDownBorder"
                                        Background="{StaticResource ControlBackgroundColorBrush}"
                                        BorderThickness="1"
                                        BorderBrush="#888888"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#888888"/>
                                <Setter Property="Background" Value="#D0D0D0"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0,0,4,4"/>
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEditable" Value="true">
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
            </Style.Triggers>
        </Style>

        <!-- SimpleStyles: ComboBoxItem -->
        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border 
                          Name="Border"
                          Padding="2"
                          SnapsToDevicePixels="true">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource AccentColorBrush}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource TextDisabledColorBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Labels -->
        <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
        </Style>

        <!-- CheckBoxes -->
        <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                            <ContentPresenter 
                                    Content="{TemplateBinding Content}" 
                                    ContentTemplate="{TemplateBinding ContentTemplate}" 
                                    Margin="12,0,0,0" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Path
                                Name="pathBackground"
                                Opacity="0"
                                Fill="Transparent"
                                Data="M -2 -2 L 10 -2 L 10 10 L -2 10"
                                Margin="0, 2, 0, 0"
                                />
                            <Path 
                              Name="pathChecked"
                              Opacity="0"
                              Stroke="{StaticResource AccentColorBrush}"
                              StrokeThickness="2"
                              Data="M 0 5 L 4 10  M 4 10 L 10 -2"
                              Margin="0, 2, 0, 0" />
                            <Path 
                              Name="pathUnChecked"
                              Opacity="0"
                              Stroke="Red"
                              StrokeThickness="2"
                              Data="M 0 0 L 10 10  M 0 10 L 10 0"
                              Margin="0, 2, 0, 0" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="pathChecked" Property="Opacity" Value="1" />
                                <Setter TargetName="pathUnChecked" Property="Opacity" Value="0" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="pathChecked" Property="Opacity" Value="0" />
                                <Setter TargetName="pathUnChecked" Property="Opacity" Value="1" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource TextDisabledColorBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- RadioButtons -->
        <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid>
                            <ContentPresenter 
                                    Content="{TemplateBinding Content}" 
                                    ContentTemplate="{TemplateBinding ContentTemplate}" 
                                    Margin="12,0,0,0" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Path 
                              Name="path"
                              Opacity="0"
                              Stroke="{StaticResource AccentColorBrush}"
                              Fill="Red"
                              StrokeThickness="2"
                              Data="M 0 5 L 4 10  M 4 10 L 10 -2"
                              Margin="0,2,0,0" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="path" Property="Opacity" Value="1" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="path" Property="Opacity" Value="0" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TextBox -->
        <Style x:Key="flatTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Rectangle Stroke="{StaticResource BorderColorBrush}" StrokeThickness="1"/>
                            <TextBox Padding="2,3,2,0" Margin="1" Text="{TemplateBinding Text}" BorderThickness="0"
                                     Background="{StaticResource ControlBackgroundColorBrush}"
                                     Foreground="{StaticResource TextColorBrush}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- XCTK IntegerUpDown -->
        <Style x:Key="{x:Type xctk:IntegerUpDown}" TargetType="{x:Type xctk:IntegerUpDown}">
            <Setter Property="Background" Value="{StaticResource ControlBackgroundColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Right"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="WatermarkTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,0,0"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:IntegerUpDown}">
                        <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" 
                                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                            Background="{TemplateBinding Background}" IsTabStop="False" 
                                            ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" 
                                            Style="{DynamicResource ButtonSpinnerStyle}">
                            <xctk:WatermarkTextBox x:Name="PART_TextBox" 
                                                   AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   AcceptsReturn="False" BorderThickness="0" Background="{TemplateBinding Background}" 
                                                   ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" 
                                                   FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" 
                                                   FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" 
                                                   FontFamily="{TemplateBinding FontFamily}" 
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                   IsTabStop="{TemplateBinding IsTabStop}" 
                                                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   MinWidth="20" Padding="{TemplateBinding Padding}" 
                                                   SelectAllOnGotFocus="{Binding SelectAllOnGotFocus, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   TextWrapping="NoWrap" TabIndex="{TemplateBinding TabIndex}" 
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                   WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}" />
                        </xctk:ButtonSpinner>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" 
                                        Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonSpinnerStyle" TargetType="{x:Type xctk:ButtonSpinner}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="IsTabStop" Value="True"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:ButtonSpinner}">
                        <Border x:Name="Border" 
                                BorderBrush="{StaticResource BorderColorBrush}" 
                                BorderThickness="1" 
                                Background="{StaticResource ControlBackgroundColorBrush}" 
                                CornerRadius="0" 
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="20"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Content="{TemplateBinding Content}" 
                                                  Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  Margin="{TemplateBinding Padding}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Grid Grid.Column="1" Margin="0,0,0,0" Width="20" Height="19">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid.Visibility>
                                        <TemplateBinding Property="ShowButtonSpinner" Converter="{StaticResource bool2VisibilityConverter}"/>
                                    </Grid.Visibility>
                                    <RepeatButton x:Name="PART_IncreaseButton" 
                                                  IsTabStop="{TemplateBinding IsTabStop}" 
                                                  Background="{StaticResource ControlBackgroundColorBrush}"
                                                  Margin="0,0,0,0">
                                        <!--Style="{DynamicResource {ComponentResourceKey ResourceId=SpinnerButtonStyleKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"-->
                                        <RepeatButton.ContentTemplate>
                                            <DataTemplate>
                                                <Path Data="M 0 3 L 4 0 L 8 3 Z" 
                                                      Focusable="False" 
                                                      Fill="{StaticResource AccentColorBrush}" 
                                                      Height="3" 
                                                      SnapsToDevicePixels="True" 
                                                      VerticalAlignment="Center" 
                                                      Width="8"/>
                                            </DataTemplate>
                                        </RepeatButton.ContentTemplate>
                                    </RepeatButton>
                                    <RepeatButton x:Name="PART_DecreaseButton" 
                                                  IsTabStop="{TemplateBinding IsTabStop}" 
                                                  Grid.Row="1"
                                                  Background="{StaticResource ControlBackgroundColorBrush}"
                                                  Margin="0,0,0,0">
                                        <!--<Style="{DynamicResource {ComponentResourceKey ResourceId=SpinnerButtonStyleKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}">-->
                                        <RepeatButton.ContentTemplate>
                                            <DataTemplate>
                                                <Path Data="M 0 0 L 4 3 L 8 0 Z" 
                                                      Focusable="False" 
                                                      Fill="{StaticResource AccentColorBrush}" 
                                                      Height="3" 
                                                      SnapsToDevicePixels="True" 
                                                      VerticalAlignment="Center" 
                                                      Width="8"/>
                                            </DataTemplate>
                                        </RepeatButton.ContentTemplate>
                                    </RepeatButton>
                                </Grid>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlDisabledBackgroundKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" SourceName="PART_IncreaseButton" Value="False">
                                <Setter Property="ContentTemplate" TargetName="PART_IncreaseButton">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <Path Data="M 0 4 L 4 0 L 8 4 Z" 
                                                  Focusable="False" Fill="{StaticResource AccentColorBrush}" 
                                                  HorizontalAlignment="Center" Height="4" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="8"/>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" SourceName="PART_DecreaseButton" Value="False">
                                <Setter Property="ContentTemplate" TargetName="PART_DecreaseButton">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <Path Data="M 0 0 L 4 4 L 8 0 Z" 
                                                  Focusable="False" Fill="{StaticResource AccentColorBrush}" 
                                                  HorizontalAlignment="Center" Height="4" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="8"/>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!-- XCTK DoubleUpDown -->
        <Style x:Key="{x:Type xctk:DoubleUpDown}" TargetType="{x:Type xctk:DoubleUpDown}">
            <Setter Property="Background" Value="{StaticResource ControlBackgroundColorBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextColorBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Right"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="WatermarkTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,0,0"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:DoubleUpDown}">
                        <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}" 
                                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                            Background="{TemplateBinding Background}" IsTabStop="False" 
                                            ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}" 
                                            Style="{DynamicResource ButtonSpinnerStyle}">
                            <xctk:WatermarkTextBox x:Name="PART_TextBox" 
                                                   AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   AcceptsReturn="False" BorderThickness="0" Background="{TemplateBinding Background}" 
                                                   ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" 
                                                   FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" 
                                                   FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" 
                                                   FontFamily="{TemplateBinding FontFamily}" 
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                   IsTabStop="{TemplateBinding IsTabStop}" 
                                                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   MinWidth="20" Padding="{TemplateBinding Padding}" 
                                                   SelectAllOnGotFocus="{Binding SelectAllOnGotFocus, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   TextWrapping="NoWrap" TabIndex="{TemplateBinding TabIndex}" 
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                   WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" 
                                                   Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}" />
                        </xctk:ButtonSpinner>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" 
                                        Value="{DynamicResource {ComponentResourceKey ResourceId=ControlMouseOverBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlSelectedBorderKey, TypeInTargetAssembly={x:Type Themes:ResourceKeys}}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="FocusManager.FocusedElement" TargetName="PART_TextBox" Value="{Binding ElementName=PART_TextBox}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- XCTK ColorPicker -->
        <Style x:Key="{x:Type xctk:ColorPicker}" TargetType="{x:Type xctk:ColorPicker}">
            <Setter Property="Background" Value="{StaticResource ControlBackgroundColorBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xctk:ColorPicker}">
                        <Grid>
                            <ToggleButton x:Name="PART_ColorPickerToggleButton" 
                                          BorderBrush="{StaticResource BorderColorBrush}" 
                                          BorderThickness="1" 
                                          Background="{StaticResource ControlBackgroundColorBrush}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          IsTabStop="True" IsChecked="{Binding IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          MinHeight="22" Padding="{TemplateBinding Padding}" Style="{TemplateBinding ButtonStyle}" 
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ToggleButton.IsHitTestVisible>
                                    <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <xctk:InverseBoolConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </ToggleButton.IsHitTestVisible>
                                <Grid Margin="2">
                                    <ContentControl x:Name="ColorOnly">
                                        <ContentControl.Style>
                                            <Style TargetType="{x:Type ContentControl}">
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="ContentTemplate">
                                                    <Setter.Value>
                                                        <DataTemplate>
                                                            <Border>
                                                                <Border.Background>
                                                                    <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                        <DrawingBrush.Drawing>
                                                                            <DrawingGroup>
                                                                                <GeometryDrawing Brush="White">
                                                                                    <GeometryDrawing.Geometry>
                                                                                        <RectangleGeometry Rect="0,0,100,100"/>
                                                                                    </GeometryDrawing.Geometry>
                                                                                </GeometryDrawing>
                                                                                <GeometryDrawing Brush="LightGray">
                                                                                    <GeometryDrawing.Geometry>
                                                                                        <GeometryGroup>
                                                                                            <RectangleGeometry Rect="0,0,50,50"/>
                                                                                            <RectangleGeometry Rect="50,50,50,50"/>
                                                                                        </GeometryGroup>
                                                                                    </GeometryDrawing.Geometry>
                                                                                </GeometryDrawing>
                                                                            </DrawingGroup>
                                                                        </DrawingBrush.Drawing>
                                                                    </DrawingBrush>
                                                                </Border.Background>
                                                                <Rectangle>
                                                                    <Rectangle.Fill>
                                                                        <Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}">
                                                                            <Binding.Converter>
                                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                                            </Binding.Converter>
                                                                        </Binding>
                                                                    </Rectangle.Fill>
                                                                </Rectangle>
                                                            </Border>
                                                        </DataTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentControl.Style>
                                    </ContentControl>
                                    <Border x:Name="ColorAndName" Background="White" Visibility="Hidden">
                                        <StackPanel Orientation="Horizontal">
                                            <ContentControl BorderBrush="#FFC9CACA" BorderThickness="1" HorizontalAlignment="Left" Margin="2,1,4,1" Width="20">
                                                <ContentControl.Style>
                                                    <Style TargetType="{x:Type ContentControl}">
                                                        <Setter Property="Focusable" Value="False"/>
                                                        <Setter Property="ContentTemplate">
                                                            <Setter.Value>
                                                                <DataTemplate>
                                                                    <Border>
                                                                        <Border.Background>
                                                                            <DrawingBrush TileMode="Tile" Viewport="0,0,0,0" ViewportUnits="Absolute">
                                                                                <DrawingBrush.Drawing>
                                                                                    <DrawingGroup>
                                                                                        <GeometryDrawing Brush="White">
                                                                                            <GeometryDrawing.Geometry>
                                                                                                <RectangleGeometry Rect="0,0,100,100"/>
                                                                                            </GeometryDrawing.Geometry>
                                                                                        </GeometryDrawing>
                                                                                        <GeometryDrawing Brush="LightGray">
                                                                                            <GeometryDrawing.Geometry>
                                                                                                <GeometryGroup>
                                                                                                    <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                    <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                </GeometryGroup>
                                                                                            </GeometryDrawing.Geometry>
                                                                                        </GeometryDrawing>
                                                                                    </DrawingGroup>
                                                                                </DrawingBrush.Drawing>
                                                                            </DrawingBrush>
                                                                        </Border.Background>
                                                                        <Rectangle>
                                                                            <Rectangle.Fill>
                                                                                <Binding Path="SelectedColor" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}">
                                                                                    <Binding.Converter>
                                                                                        <xctk:ColorToSolidColorBrushConverter/>
                                                                                    </Binding.Converter>
                                                                                </Binding>
                                                                            </Rectangle.Fill>
                                                                        </Rectangle>
                                                                    </Border>
                                                                </DataTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:ColorPicker}}}" Value="{x:Null}">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ContentControl.Style>
                                            </ContentControl>
                                            <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center"/>
                                        </StackPanel>
                                    </Border>
                                </Grid>
                            </ToggleButton>
                            <Popup x:Name="PART_ColorPickerPalettePopup" 
                                   AllowsTransparency="True" Focusable="False" HorizontalOffset="1" 
                                   IsOpen="{Binding IsChecked, ElementName=PART_ColorPickerToggleButton}" 
                                   PopupAnimation="Slide" StaysOpen="False" VerticalOffset="1" VerticalAlignment="Bottom">
                                <Border BorderThickness="1" Padding="3" BorderBrush="{StaticResource AccentColorBrush}" Background="{StaticResource ControlBackgroundColorBrush}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid x:Name="_colorPaletteHost" Margin="4" Visibility="Collapsed">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Grid Grid.Row="1">
                                                <Grid.Visibility>
                                                    <TemplateBinding Property="ShowAvailableColors" Converter="{StaticResource bool2VisibilityConverter}"/>
                                                </Grid.Visibility>
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>
                                                    <TextBlock Background="AliceBlue" Margin="0,0,0,1" Padding="2" Text="{TemplateBinding AvailableColorsHeader}"/>
                                                    <ListBox x:Name="PART_AvailableColors" Grid.Row="1">
                                                        <ListBox.Style>
                                                            <Style TargetType="{x:Type ListBox}">
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="BorderThickness" Value="0"/>
                                                                <Setter Property="ItemsPanel">
                                                                    <Setter.Value>
                                                                        <ItemsPanelTemplate>
                                                                            <WrapPanel IsItemsHost="True" Width="200"/>
                                                                        </ItemsPanelTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="ItemContainerStyle">
                                                                    <Setter.Value>
                                                                        <Style TargetType="{x:Type ListBoxItem}">
                                                                            <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                                            <Setter Property="Template">
                                                                                <Setter.Value>
                                                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                        <Grid ToolTip="{Binding Name}">
                                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                            <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                                <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                                            </Border>
                                                                                        </Grid>
                                                                                        <ControlTemplate.Triggers>
                                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="Red"/>
                                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="Yellow"/>
                                                                                            </Trigger>
                                                                                            <Trigger Property="IsSelected" Value="True">
                                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="Red"/>
                                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="Yellow"/>
                                                                                            </Trigger>
                                                                                        </ControlTemplate.Triggers>
                                                                                    </ControlTemplate>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="ItemTemplate">
                                                                    <Setter.Value>
                                                                        <DataTemplate>
                                                                            <Grid>
                                                                                <Border BorderBrush="Black" BorderThickness="1" Margin="2">
                                                                                    <Border.Background>
                                                                                        <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                                            <DrawingBrush.Drawing>
                                                                                                <DrawingGroup>
                                                                                                    <GeometryDrawing Brush="White">
                                                                                                        <GeometryDrawing.Geometry>
                                                                                                            <RectangleGeometry Rect="0,0,100,100"/>
                                                                                                        </GeometryDrawing.Geometry>
                                                                                                    </GeometryDrawing>
                                                                                                    <GeometryDrawing Brush="LightGray">
                                                                                                        <GeometryDrawing.Geometry>
                                                                                                            <GeometryGroup>
                                                                                                                <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                                <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                            </GeometryGroup>
                                                                                                        </GeometryDrawing.Geometry>
                                                                                                    </GeometryDrawing>
                                                                                                </DrawingGroup>
                                                                                            </DrawingBrush.Drawing>
                                                                                        </DrawingBrush>
                                                                                    </Border.Background>
                                                                                    <Rectangle Height="14" Width="14">
                                                                                        <Rectangle.Style>
                                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                                <Setter Property="Fill">
                                                                                                    <Setter.Value>
                                                                                                        <Binding Path="Color">
                                                                                                            <Binding.Converter>
                                                                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                                                                            </Binding.Converter>
                                                                                                        </Binding>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </Rectangle.Style>
                                                                                    </Rectangle>
                                                                                </Border>
                                                                            </Grid>
                                                                        </DataTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="SelectionMode" Value="Single"/>
                                                            </Style>
                                                        </ListBox.Style>
                                                    </ListBox>
                                                </Grid>
                                            </Grid>
                                            <Grid Grid.Row="2">
                                                <Grid.Visibility>
                                                    <TemplateBinding Property="ShowStandardColors" Converter="{StaticResource bool2VisibilityConverter}"/>
                                                </Grid.Visibility>
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>
                                                    <TextBlock Background="AliceBlue" Margin="0,1" Padding="2" Text="{TemplateBinding StandardColorsHeader}"/>
                                                    <ListBox x:Name="PART_StandardColors" Grid.Row="1">
                                                        <ListBox.Style>
                                                            <Style TargetType="{x:Type ListBox}">
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="BorderThickness" Value="0"/>
                                                                <Setter Property="ItemsPanel">
                                                                    <Setter.Value>
                                                                        <ItemsPanelTemplate>
                                                                            <WrapPanel IsItemsHost="True" Width="200"/>
                                                                        </ItemsPanelTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="ItemContainerStyle">
                                                                    <Setter.Value>
                                                                        <Style TargetType="{x:Type ListBoxItem}">
                                                                            <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                                            <Setter Property="Template">
                                                                                <Setter.Value>
                                                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                        <Grid ToolTip="{Binding Name}">
                                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                            <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                                <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                                            </Border>
                                                                                        </Grid>
                                                                                        <ControlTemplate.Triggers>
                                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="Red"/>
                                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="Yellow"/>
                                                                                            </Trigger>
                                                                                            <Trigger Property="IsSelected" Value="True">
                                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="Red"/>
                                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="Yellow"/>
                                                                                            </Trigger>
                                                                                        </ControlTemplate.Triggers>
                                                                                    </ControlTemplate>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="ItemTemplate">
                                                                    <Setter.Value>
                                                                        <DataTemplate>
                                                                            <Grid>
                                                                                <Border BorderBrush="Black" BorderThickness="1" Margin="2">
                                                                                    <Border.Background>
                                                                                        <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                                            <DrawingBrush.Drawing>
                                                                                                <DrawingGroup>
                                                                                                    <GeometryDrawing Brush="White">
                                                                                                        <GeometryDrawing.Geometry>
                                                                                                            <RectangleGeometry Rect="0,0,100,100"/>
                                                                                                        </GeometryDrawing.Geometry>
                                                                                                    </GeometryDrawing>
                                                                                                    <GeometryDrawing Brush="LightGray">
                                                                                                        <GeometryDrawing.Geometry>
                                                                                                            <GeometryGroup>
                                                                                                                <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                                <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                            </GeometryGroup>
                                                                                                        </GeometryDrawing.Geometry>
                                                                                                    </GeometryDrawing>
                                                                                                </DrawingGroup>
                                                                                            </DrawingBrush.Drawing>
                                                                                        </DrawingBrush>
                                                                                    </Border.Background>
                                                                                    <Rectangle Height="14" Width="14">
                                                                                        <Rectangle.Style>
                                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                                <Setter Property="Fill">
                                                                                                    <Setter.Value>
                                                                                                        <Binding Path="Color">
                                                                                                            <Binding.Converter>
                                                                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                                                                            </Binding.Converter>
                                                                                                        </Binding>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </Rectangle.Style>
                                                                                    </Rectangle>
                                                                                </Border>
                                                                            </Grid>
                                                                        </DataTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="SelectionMode" Value="Single"/>
                                                            </Style>
                                                        </ListBox.Style>
                                                    </ListBox>
                                                </Grid>
                                            </Grid>
                                            <Grid Margin="0,1" Grid.Row="3">
                                                <Grid.Visibility>
                                                    <TemplateBinding Property="ShowRecentColors" Converter="{StaticResource bool2VisibilityConverter}"/>
                                                </Grid.Visibility>
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>
                                                    <TextBlock Background="AliceBlue" Margin="0,1" Padding="2" Text="{TemplateBinding RecentColorsHeader}"/>
                                                    <ListBox x:Name="PART_RecentColors" Grid.Row="1">
                                                        <ListBox.Style>
                                                            <Style TargetType="{x:Type ListBox}">
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="BorderThickness" Value="0"/>
                                                                <Setter Property="ItemsPanel">
                                                                    <Setter.Value>
                                                                        <ItemsPanelTemplate>
                                                                            <WrapPanel IsItemsHost="True" Width="200"/>
                                                                        </ItemsPanelTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="ItemContainerStyle">
                                                                    <Setter.Value>
                                                                        <Style TargetType="{x:Type ListBoxItem}">
                                                                            <Setter Property="ToolTip" Value="{Binding Name}"/>
                                                                            <Setter Property="Template">
                                                                                <Setter.Value>
                                                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                        <Grid ToolTip="{Binding Name}">
                                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                                                            <Border x:Name="_outerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                                <Border x:Name="_innerBorder" BorderBrush="Transparent" BorderThickness="1" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                                                                            </Border>
                                                                                        </Grid>
                                                                                        <ControlTemplate.Triggers>
                                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="Red"/>
                                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="Yellow"/>
                                                                                            </Trigger>
                                                                                            <Trigger Property="IsSelected" Value="True">
                                                                                                <Setter Property="BorderBrush" TargetName="_outerBorder" Value="Red"/>
                                                                                                <Setter Property="BorderBrush" TargetName="_innerBorder" Value="Yellow"/>
                                                                                            </Trigger>
                                                                                        </ControlTemplate.Triggers>
                                                                                    </ControlTemplate>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="ItemTemplate">
                                                                    <Setter.Value>
                                                                        <DataTemplate>
                                                                            <Grid>
                                                                                <Border BorderBrush="Black" BorderThickness="1" Margin="2">
                                                                                    <Border.Background>
                                                                                        <DrawingBrush TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute">
                                                                                            <DrawingBrush.Drawing>
                                                                                                <DrawingGroup>
                                                                                                    <GeometryDrawing Brush="White">
                                                                                                        <GeometryDrawing.Geometry>
                                                                                                            <RectangleGeometry Rect="0,0,100,100"/>
                                                                                                        </GeometryDrawing.Geometry>
                                                                                                    </GeometryDrawing>
                                                                                                    <GeometryDrawing Brush="LightGray">
                                                                                                        <GeometryDrawing.Geometry>
                                                                                                            <GeometryGroup>
                                                                                                                <RectangleGeometry Rect="0,0,50,50"/>
                                                                                                                <RectangleGeometry Rect="50,50,50,50"/>
                                                                                                            </GeometryGroup>
                                                                                                        </GeometryDrawing.Geometry>
                                                                                                    </GeometryDrawing>
                                                                                                </DrawingGroup>
                                                                                            </DrawingBrush.Drawing>
                                                                                        </DrawingBrush>
                                                                                    </Border.Background>
                                                                                    <Rectangle Height="14" Width="14">
                                                                                        <Rectangle.Style>
                                                                                            <Style TargetType="{x:Type Rectangle}">
                                                                                                <Setter Property="Fill">
                                                                                                    <Setter.Value>
                                                                                                        <Binding Path="Color">
                                                                                                            <Binding.Converter>
                                                                                                                <xctk:ColorToSolidColorBrushConverter/>
                                                                                                            </Binding.Converter>
                                                                                                        </Binding>
                                                                                                    </Setter.Value>
                                                                                                </Setter>
                                                                                            </Style>
                                                                                        </Rectangle.Style>
                                                                                    </Rectangle>
                                                                                </Border>
                                                                            </Grid>
                                                                        </DataTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="SelectionMode" Value="Single"/>
                                                            </Style>
                                                        </ListBox.Style>
                                                    </ListBox>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                        <Grid x:Name="_colorCanvasHost" Visibility="Collapsed">
                                            <xctk:ColorCanvas BorderThickness="0" Background="Transparent" SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </Grid>
                                        <Separator HorizontalAlignment="Stretch" Margin="5,0" Grid.Row="1">
                                            <Separator.Visibility>
                                                <TemplateBinding Property="ShowAdvancedButton" Converter="{StaticResource bool2VisibilityConverter}"/>
                                            </Separator.Visibility>
                                        </Separator>
                                        <Button x:Name="PART_ColorModeButton" Margin="5" Grid.Row="2">
                                            <Button.Visibility>
                                                <TemplateBinding Property="ShowAdvancedButton" Converter="{StaticResource bool2VisibilityConverter}"/>
                                            </Button.Visibility>
                                        </Button>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="DisplayColorAndName" Value="True">
                                <Setter Property="Visibility" TargetName="ColorOnly" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="ColorAndName" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="ColorMode" Value="ColorPalette">
                                <Setter Property="Visibility" TargetName="_colorPaletteHost" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="_colorCanvasHost" Value="Collapsed"/>
                                <Setter Property="Content" TargetName="PART_ColorModeButton" Value="{Binding AdvancedButtonHeader, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="ColorMode" Value="ColorCanvas">
                                <Setter Property="Visibility" TargetName="_colorPaletteHost" Value="Collapsed"/>
                                <Setter Property="Visibility" TargetName="_colorCanvasHost" Value="Visible"/>
                                <Setter Property="Content" TargetName="PART_ColorModeButton" Value="{Binding StandardButtonHeader, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="ShowDropDownButton" Value="False">
                                <Setter Property="BorderThickness" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!-- Data -->
        <!-- Settings Data -->
        <x:Array x:Key="KeyboardModelList" 
                 Type="sys:String">
            <sys:String>None</sys:String>
            <sys:String>K65-RGB</sys:String>
            <sys:String>K70-RGB</sys:String>
            <sys:String>K95-RGB</sys:String>
            <sys:String>STRAFE</sys:String>
            <sys:String>STRAFE-RGB</sys:String>
        </x:Array>

        <x:Array x:Key="KeyboardLayoutList" 
                 Type="sys:String">
            <sys:String>None</sys:String>
            <sys:String>Belgium</sys:String>
            <sys:String>Brazil</sys:String>
            <sys:String>China</sys:String>
            <sys:String>European Union</sys:String>
            <sys:String>France</sys:String>
            <sys:String>Germany</sys:String>
            <sys:String>Italy</sys:String>
            <sys:String>Japan</sys:String>
            <sys:String>Korea</sys:String>
            <sys:String>Mexico</sys:String>
            <sys:String>North America</sys:String>
            <sys:String>Nordic</sys:String>
            <sys:String>Russia</sys:String>
            <sys:String>Spain</sys:String>
            <sys:String>Taiwan</sys:String>
            <sys:String>United Kingdom</sys:String>
        </x:Array>

        <x:Array x:Key="MouseModelList" 
                 Type="sys:String">
            <sys:String>None</sys:String>
            <sys:String>M65 RGB</sys:String>
            <sys:String>Saber Laser</sys:String>
            <sys:String>Saber Optical</sys:String>
            <sys:String>Scimitar</sys:String>
        </x:Array>

        <x:Array x:Key="LogLevelList"
                 Type="sys:String">
            <sys:String>0: Default</sys:String>
            <sys:String>4: Hardware Messages</sys:String>
            <sys:String>5: Thread States</sys:String>
            <sys:String>6: Engine Output</sys:String>
            <sys:String>7: Interface</sys:String>
        </x:Array>

        <!-- Effects Lists -->
        <x:Array x:Key="ForegroundEffectsList" 
                 Type="sys:String">
            <sys:String>Spectrograph</sys:String>
            <sys:String>Random Lights</sys:String>
            <sys:String>Reactive Typing</sys:String>
            <sys:String>Heatmap</sys:String>
            <sys:String>CPU Usage Bar</sys:String>
        </x:Array>

        <x:Array x:Key="BackgroundEffectsList" 
                 Type="sys:String">
            <sys:String>Solid</sys:String>
            <sys:String>Breathe</sys:String>
            <sys:String>Spectrum Cycle</sys:String>
            <sys:String>Rainbow</sys:String>
            <sys:String>CPU Usage</sys:String>
            <sys:String>Windows Accent</sys:String>
        </x:Array>

        <!-- Foreground: Spectro -->
        <x:Array x:Key="SpectroRainbowDirectionList"
                 Type="sys:String">
            <sys:String>Right</sys:String>
            <sys:String>Left</sys:String>
            <sys:String>Up</sys:String>
            <sys:String>Down</sys:String>
        </x:Array>

        <x:Array x:Key="ForegroundSpectroStyleList" Type="sys:String">
            <sys:String>Solid</sys:String>
            <sys:String>Gradient Horizontal</sys:String>
            <sys:String>Gradient Vertical</sys:String>
            <sys:String>Rainbow</sys:String>
            <sys:String>Spectrum Cycle</sys:String>
            <sys:String>Defined Rows</sys:String>
        </x:Array>

        <x:Array x:Key="FftSizeList" Type="sys:String">
            <sys:String>128</sys:String>
            <sys:String>256</sys:String>
            <sys:String>512</sys:String>
            <sys:String>1024</sys:String>
            <sys:String>2048</sys:String>
            <sys:String>4096</sys:String>
            <sys:String>8192</sys:String>
        </x:Array>

        <x:Array x:Key="FftBinsPerPointList" Type="sys:String">
            <sys:String>1</sys:String>
            <sys:String>2</sys:String>
            <sys:String>4</sys:String>
            <sys:String>8</sys:String>
            <sys:String>16</sys:String>
            <sys:String>32</sys:String>
        </x:Array>

        <x:Array x:Key="FftWindowingModeList" Type="sys:String">
            <sys:String>Hann</sys:String>
            <sys:String>Hamming</sys:String>
            <sys:String>Blackman-Harris</sys:String>
        </x:Array>

        <!-- Foreground: Random Keys -->
        <x:Array x:Key="ForegroundRandomLightsStyleList"
                 Type="sys:String">
            <sys:String>Switch</sys:String>
            <sys:String>Fade</sys:String>
        </x:Array>

        <x:Array x:Key="ForegroundRandomLightsStartTypeList"
                 Type="sys:String">
            <sys:String>Defined Colour</sys:String>
            <sys:String>Random Colour</sys:String>
        </x:Array>

        <x:Array x:Key="ForegroundRandomLightsEndTypeList"
                 Type="sys:String">
            <sys:String>None</sys:String>
            <sys:String>Defined Colour</sys:String>
            <sys:String>Random Colour</sys:String>
        </x:Array>

        <!-- Foreground: Reactive -->
        <x:Array x:Key="ForegroundReactiveStyleList"
                 Type="sys:String">
            <sys:String>Switch</sys:String>
            <sys:String>Fade</sys:String>
        </x:Array>

        <x:Array x:Key="ForegroundReactiveStartTypeList"
                 Type="sys:String">
            <sys:String>Defined Colour</sys:String>
            <sys:String>Random Colour</sys:String>
        </x:Array>

        <x:Array x:Key="ForegroundReactiveEndTypeList"
                 Type="sys:String">
            <sys:String>None</sys:String>
            <sys:String>Defined Colour</sys:String>
            <sys:String>Random Colour</sys:String>
        </x:Array>

        <!-- Background: Rainbow -->
        <x:Array x:Key="BackgroundRainbowDirectionList"
                 Type="sys:String">
            <sys:String>Right</sys:String>
            <sys:String>Left</sys:String>
            <sys:String>Up</sys:String>
            <sys:String>Down</sys:String>
        </x:Array>
    </Application.Resources>
</Application>